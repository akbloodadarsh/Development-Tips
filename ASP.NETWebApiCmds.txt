install dependencies
tools
entity frame work core
sql
cors
mvc.newtonsoftjson
install package from console if usesql server is not showing in startup.cs
PM > Install-Package Microsoft.EntityFrameworkCore.SqlServer -Version 5.0.14

* Add cors to configure services, to enable webapi calls and consume it in our react app
services.AddCors(c =>
            {
                c.AddPolicy("AllowOrigin", options => options.AllowAnyOrigin().AllowAnyMethod()
                .AllowAnyHeader());
            });


* use cors in configure for the same 
app.UseCors(options => options.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader());


* set JSON as default in serializer using JSON 
add this in configureservices

services.AddControllersWithViews()
                .AddNewtonsoftJson(options =>
                options.SerializerSettings.ReferenceLoopHandling = Newtonsoft
                .Json.ReferenceLoopHandling.Ignore)
                .AddNewtonsoftJson(options => options.SerializerSettings.ContractResolver
                = new DefaultContractResolver());


create models
create db context

namespace project_name
{
    public class AppDBContext : DbContext
    {
        public AppDBContext(DbContextOptions<AppDBContext> options) : base(options)
        {

        }

        public DbSet<Model_name> Table_name { get; set; }
    }
}

configure appsettings.json and add connection stirng
"ConnectionStrings": {
    "EmpCon": "Server=DESKTOP-I910PHJ\\SQLEXPRESS;Database=EmployeeDB;Trusted_Connection=True;"
  }
  
// for .net 5.0
configure startup file -> configureservices function and add
public class Startup
    {
        public readonly IConfiguration configuration;

        public Startup(IConfiguration _configuration)
        {
            configuration = _configuration;
        }

        public void Configure(IApplicationBuilder app)
        {
            // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        }

        public void ConfigureServices(IServiceCollection services)
        {
            services.AddDbContext<AppDBContext>(options =>
    options.UseSqlServer(configuration.GetConnectionString("ImgApiCon")));
        }
    }

// for .net 6
var builder = WebApplication.CreateBuilder(args);
// Add services to the container.
builder.Services.AddDbContext<ImgDBContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("ImgApiCon")));
builder.Services.AddCors(c =>
{
    c.AddPolicy("AllowOrigin", options => options.AllowAnyOrigin().AllowAnyMethod()
    .AllowAnyHeader());
});
builder.Services.AddControllersWithViews()
                .AddNewtonsoftJson(options =>
                options.SerializerSettings.ReferenceLoopHandling = Newtonsoft
                .Json.ReferenceLoopHandling.Ignore)
                .AddNewtonsoftJson(options => options.SerializerSettings.ContractResolver
                = new DefaultContractResolver());
builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
var app = builder.Build();

// Configure the HTTP request pipeline.
app.UseCors(options => options.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader());
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}
app.UseAuthorization();
app.MapControllers();
app.Run();



* add-migration inital-migrate
* update database

test the api using postman

add cors-for allowing to allow api calls
